// <auto-generated />
using System;
using Saas.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240101052239_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsShared")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("UserId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PaymentPlanId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PlanExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PaymentPlanId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("Entities.OrganizationUser", b =>
                {
                    b.Property<Guid>("OrganizationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CognitoUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("InvitationAcceptedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("InvitingUserId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("OrganizationId", "CognitoUserId");

                    b.HasIndex("CognitoUserId");

                    b.ToTable("OrganizationUsers");
                });

            modelBuilder.Entity("Entities.Secret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsShared")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FolderId");

                    b.ToTable("Secrets");
                });

            modelBuilder.Entity("Saas.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InitiatingUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VerifyingUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InitiatingUserId");

                    b.HasIndex("PlanId");

                    b.HasIndex("VerifyingUserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Saas.Entities.PaymentPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MonthlyCost")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("PaymentPlans");
                });

            modelBuilder.Entity("Saas.Entities.SharedSecret", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasAllowedEdit")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SecretId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SharedTo")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SecretId");

                    b.HasIndex("SharedTo");

                    b.ToTable("SharedSecret");
                });

            modelBuilder.Entity("Saas.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PaymentPlanId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("PaymentPlanId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Folder", b =>
                {
                    b.HasOne("Entities.Organization", "Organization")
                        .WithMany("SecretFolders")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("Saas.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Organization", b =>
                {
                    b.HasOne("Saas.Entities.PaymentPlan", "PaymentPlan")
                        .WithMany("Organizations")
                        .HasForeignKey("PaymentPlanId");

                    b.Navigation("PaymentPlan");
                });

            modelBuilder.Entity("Entities.OrganizationUser", b =>
                {
                    b.HasOne("Saas.Entities.User", "CognitoUser")
                        .WithMany()
                        .HasForeignKey("CognitoUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Organization", "Organization")
                        .WithMany("OrganizationUsers")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CognitoUser");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Entities.Secret", b =>
                {
                    b.HasOne("Saas.Entities.User", "CreatingUser")
                        .WithMany("Secrets")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Folder", "Folder")
                        .WithMany("Secrets")
                        .HasForeignKey("FolderId");

                    b.Navigation("CreatingUser");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("Saas.Entities.Payment", b =>
                {
                    b.HasOne("Saas.Entities.User", "InitiatingUser")
                        .WithMany("PaymentsInitiated")
                        .HasForeignKey("InitiatingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Saas.Entities.PaymentPlan", "Plan")
                        .WithMany("Payments")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Saas.Entities.User", "VerifyingUser")
                        .WithMany("PaymentsVerified")
                        .HasForeignKey("VerifyingUserId");

                    b.Navigation("InitiatingUser");

                    b.Navigation("Plan");

                    b.Navigation("VerifyingUser");
                });

            modelBuilder.Entity("Saas.Entities.SharedSecret", b =>
                {
                    b.HasOne("Entities.Secret", "Secret")
                        .WithMany("SharedSecrets")
                        .HasForeignKey("SecretId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Organization", "Organization")
                        .WithMany("SharedSecrets")
                        .HasForeignKey("SharedTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Saas.Entities.User", "User")
                        .WithMany("SharedSecrets")
                        .HasForeignKey("SharedTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Secret");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Saas.Entities.User", b =>
                {
                    b.HasOne("Saas.Entities.PaymentPlan", "PaymentPlan")
                        .WithMany("Users")
                        .HasForeignKey("PaymentPlanId");

                    b.Navigation("PaymentPlan");
                });

            modelBuilder.Entity("Entities.Folder", b =>
                {
                    b.Navigation("Secrets");
                });

            modelBuilder.Entity("Entities.Organization", b =>
                {
                    b.Navigation("OrganizationUsers");

                    b.Navigation("SecretFolders");

                    b.Navigation("SharedSecrets");
                });

            modelBuilder.Entity("Entities.Secret", b =>
                {
                    b.Navigation("SharedSecrets");
                });

            modelBuilder.Entity("Saas.Entities.PaymentPlan", b =>
                {
                    b.Navigation("Organizations");

                    b.Navigation("Payments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Saas.Entities.User", b =>
                {
                    b.Navigation("PaymentsInitiated");

                    b.Navigation("PaymentsVerified");

                    b.Navigation("Secrets");

                    b.Navigation("SharedSecrets");
                });
#pragma warning restore 612, 618
        }
    }
}
